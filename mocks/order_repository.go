// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/orders/orders_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/orders/orders_repository.go -destination=mocks/order_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "docker-example/internal/app/orders/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockordersRepository is a mock of ordersRepository interface.
type MockordersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockordersRepositoryMockRecorder
}

// MockordersRepositoryMockRecorder is the mock recorder for MockordersRepository.
type MockordersRepositoryMockRecorder struct {
	mock *MockordersRepository
}

// NewMockordersRepository creates a new mock instance.
func NewMockordersRepository(ctrl *gomock.Controller) *MockordersRepository {
	mock := &MockordersRepository{ctrl: ctrl}
	mock.recorder = &MockordersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockordersRepository) EXPECT() *MockordersRepositoryMockRecorder {
	return m.recorder
}

// GetOrderByOrderNumber mocks base method.
func (m *MockordersRepository) GetOrderByOrderNumber(ctx context.Context, orderNumber string) (model.OrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(model.OrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByOrderNumber indicates an expected call of GetOrderByOrderNumber.
func (mr *MockordersRepositoryMockRecorder) GetOrderByOrderNumber(ctx, orderNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByOrderNumber", reflect.TypeOf((*MockordersRepository)(nil).GetOrderByOrderNumber), ctx, orderNumber)
}
